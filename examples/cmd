#!/bin/bash
#  oooo  oooo
#  `888  `888
#   888   888  ooo. .oo.  .oo.    .ooooo oo
#   888   888  `888P"Y88bP"Y88b  d88' `888
#   888   888   888   888   888  888   888
#  o888o o888o o888o o888o o888o `V8bod888
#  ┌─────────────────────────────────┐ 888
#  │ a query CLI and context manager │ 888.
#  │ for LLM-powered shell pipelines │ 8P'
#  └─────────────────────────────────┘ "
#  Copyright (C) 2023 Justin Collier <m@jpcx.dev>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

# !! THIS IS AN EXPERIMENTAL UTILITY !!
# I am not responsible for any changes you make to your system.

INTERPRET="GPT-3.5, you are the first stage of a bash command generator. The
user has entered a description of a bash command for a linux system. Please
interpret their intent and disambiguate their request by providing the next
stage with a description of their intent. Be as specific as possible. Do not
assume that the user wants a script file, unless they ask for one. The user
will not be able to to interact with you any further- do not ask them any
questions. Do not write the actual command- that is handled by the next stage."

GENERATE="GPT-4, you are the final stage of a bash command generator. Your task
is to generate a bash command from an English description, which has been
generated by another GPT instance. Your output will be fed directly into bash;
do not answer in Markdown as usual, or it will break the script. Ensure that
any common aliases are expanded. If the output of the command is empty or does
not provide very many details, make sure that the user receives some kind of
actual feedback from the system to make sure that the command was successful
(either via tree, cat, ls, etc., depending on the operation). Remember, your
outputs will be fed directly into bash. Be sure to use safe practices and use
proper error handling. Use color output mode with ls, grep, or other similar
commands."

interpret() {
	msg=`cat`
	printf "[interpreting...]\n" >&2
	echo "$msg" |
		llmq q gpt -m gpt-3.5-turbo -S true -T 0.7 -s "$INTERPRET"
}

generate() {
	msg=`tee /dev/fd/2`
	printf "\n[generating...]\n" >&2
	echo "$msg" |
		llmq q gpt -m gpt-4 -S true -T 1.0 -s "$GENERATE"
}

execute() {
	cmd=`tee /dev/fd/2`
	while true
	do
		printf "\n[execute? (Y/n)]"
		read -n 1 -s choice </dev/tty
		case "$choice" in
			""|[Yy])
				printf "\n\n[result]\n--------\n" >&2
				bash -c "$cmd" </dev/tty
				exit
				;;
			[Nn])
				echo
				exit
				;;
			*)
				printf "\nInvalid input. Please try again.\n"
				;;
		esac
	done
}

echo "$([ "$#" -eq 0 ] && cat || echo "$@")" |
	interpret |
	generate  |
	execute
